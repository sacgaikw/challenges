package com.ge.power.services;

import lombok.extern.slf4j.Slf4j;

import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Base64;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.json.JsonParser;
import org.springframework.boot.json.JsonParserFactory;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.StringHttpMessageConverter;
import org.springframework.security.oauth2.client.OAuth2RestOperations;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

import com.ge.power.entities.AccountModel;
import com.ge.power.models.BulkUserModel;
import com.ge.power.models.ConsolidatedUserModel;
import com.ge.power.models.CreateUserModel;
import com.ge.power.models.LinkUserModel;
import com.ge.power.models.UpdateUserModel;

/**
 * Created by Steve Mason (212546365) on 11/9/16. * Modified by Antara Ganguly
 * (503071097) on 8/1/2018
 */

@Service
@Slf4j
public class UserService {

	// @Value("${akana.endpoint}") private String akanaEndpoint;
	// @Value("${passwordreset.url}") private String passwordResetUrl;
	// @Value("${passwordreset.servlet.url}") private String
	// passwordResetServletUrl;

	// private final OAuth2RestOperations akanaRestTemplate;
	// private final RestTemplate passwordResetTemplate;

	// @Autowired
	/*
	 * public UserService(){
	 * 
	 * }
	 */
	@Value("${snaplogic.endpoint}")
	private String snaplogicEndpoint;
	@Value("${snaplogic.accesstoken}")
	private String accessToken;
	@Value("${user.endpoint}")
	private String userEndpoint;
	@Value("${user.apiPath}")
	private String apiPath;

	/*
	 * public String registerUser(AccountModel user){
	 * 
	 * log.info(user.toString());
	 * 
	 * String ldapEntryJson=createRegisterEntry(user); String url="https://"+
	 * akanaEndpoint
	 * +"/digital/b2bandb2c/v2/registerB2BAccount?ldapEntry={ldapEntry}";
	 * ArrayList akanaResp = akanaRestTemplate.postForObject(url, null,
	 * ArrayList.class, ldapEntryJson);
	 * 
	 * String resp=handleRegisterResponse(akanaResp); log.info(resp); return
	 * resp; }
	 * 
	 * public String resetPassword(AccountModel user){
	 * log.info(user.toString()); String
	 * ldapEntryJson=createPasswordEntry(user); String url="https://"+
	 * akanaEndpoint
	 * +"/digital/b2bandb2c/v2/updateB2BAccount?ldapEntry={ldapEntry}";
	 * ArrayList akanaResp = akanaRestTemplate.postForObject(url, null,
	 * ArrayList.class, ldapEntryJson);
	 * 
	 * String resp=handlePasswordResponse(akanaResp); log.info(resp); return
	 * resp; }
	 */

	// Added by Antara Ganguly:503071097
	public String addUser(CreateUserModel user) {
		log.info("Inside service adduser" + user.toString());
		String ldapEntryJson = createAzureEntry(user);
		log.info(ldapEntryJson);
		RestTemplate restTemplate = new RestTemplate();
		HttpHeaders headers = new HttpHeaders();
		String url = snaplogicEndpoint + "/AddUserInADTask";
		restTemplate.getMessageConverters()
        .add(0, new StringHttpMessageConverter(Charset.forName("UTF-8")));
		headers.setContentType(MediaType.APPLICATION_JSON);
		headers.add("Authorization", "Bearer " + accessToken);
		HttpEntity<String> entity = new HttpEntity<String>(ldapEntryJson, headers);
		ArrayList response = restTemplate.postForObject(url, entity, ArrayList.class);
		log.info(response.toString());
		String resp = handleResponse(response);
		return resp.toString();
	}

	// Added by Antara Ganguly:503071097 to get account information from
	// snaplogic

	public String isValidId(String accountId) {
		log.info("Inside service account validation" + accountId);
		RestTemplate restTemplate = new RestTemplate();
		String url = snaplogicEndpoint + "/AccountIdentifierTask?accountid=" + accountId;
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.APPLICATION_JSON);
		headers.add("Authorization", "Bearer " + accessToken);
		HttpEntity<String> entity = new HttpEntity<String>(headers);
		ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.GET, entity, String.class);
		log.info(response.getBody());
		return response.getBody();

	}

	// Added by Antara Ganguly:503071097 check if user exists in AD via
	// snaplogic
	public String getUser(String userId) {
		log.info("Inside service check user exists" + userId);
		RestTemplate restTemplate = new RestTemplate();
		String url = snaplogicEndpoint + "/CheckUserAvailabilityTask?user_id=" + userId;
		HttpHeaders headers = new HttpHeaders();		
		headers.setContentType(MediaType.APPLICATION_JSON);
		headers.add("Authorization", "Bearer " + accessToken);
		HttpEntity<String> entity = new HttpEntity<String>(headers);
		ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.GET, entity, String.class);
		log.info(response.getBody());
		return response.getBody();

	}

	// Added by Antara Ganguly:503071097 Get the userdetails from snaplogic
	public String getUserDetails(String userId) {
		log.info("Inside service get user details" + userId);
		RestTemplate restTemplate = new RestTemplate();
		String url = snaplogicEndpoint + "/GetUserDetailsTask?user_id=" + userId;
		HttpHeaders headers = new HttpHeaders();
		//MediaType mediaType = new MediaType("application", "json", Charset.forName("UTF-8"));
		restTemplate.getMessageConverters()
        .add(0, new StringHttpMessageConverter(Charset.forName("UTF-8")));
		headers.setContentType(MediaType.APPLICATION_JSON);
		//headers.setContentType(mediaType);
		headers.add("Authorization", "Bearer " + accessToken);
		HttpEntity<String> entity = new HttpEntity<String>(headers);
		ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.GET, entity, String.class);
		log.info(response.getBody());
		return response.getBody();

	}

	// Added by Antara Ganguly:503071097: Account verification after email from
	// snaplogic
	public String verifyAccount(String userName, String userUuid) {
		log.info("Inside service verify account with email" + userName);
		//decoding data		
		byte[] decodeduserNameBytes = Base64.getDecoder().decode(userName);
		 userName = new String(decodeduserNameBytes);
		byte[] decodeduserUuidBytes = Base64.getDecoder().decode(userUuid);
		 userUuid = new String(decodeduserUuidBytes);		
		RestTemplate restTemplate = new RestTemplate();
		String url = snaplogicEndpoint + "/VerifyUserAccountTask?user_id=" + userName + "&email_uuid=" + userUuid;
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.APPLICATION_JSON);
		headers.add("Authorization", "Bearer " + accessToken);
		HttpEntity<String> entity = new HttpEntity<String>(headers);
		ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.GET, entity, String.class);
		log.info(response.getBody());
		return response.getBody();

	}

	// Added by Antara Ganguly:503071097 for update user in Bulk Registration
	public String updateUser(UpdateUserModel user) {
		log.info("Inside service updateuser" + user.toString());
		String snaplogiEntryJson = createAzureEntry(user);
		log.info(snaplogiEntryJson);
		RestTemplate restTemplate = new RestTemplate();
		HttpHeaders headers = new HttpHeaders();
		String url = snaplogicEndpoint + "/UpdateUserInADTask";
		restTemplate.getMessageConverters()
        .add(0, new StringHttpMessageConverter(Charset.forName("UTF-8")));
		headers.setContentType(MediaType.APPLICATION_JSON_UTF8);		
		headers.add("Authorization", "Bearer " + accessToken);
		HttpEntity<String> entity = new HttpEntity<String>(snaplogiEntryJson, headers);
		ArrayList response = restTemplate.postForObject(url, entity, ArrayList.class);
		log.info(response.toString());
		return response.toString();
	}

	// Added by Antara Ganguly:503071097 for Bulk Registration
	public String addBulkUser(BulkUserModel user) {
		log.info("Inside service addbulkuser" + user.toString());
		String ldapEntryJson = createAzureEntry(user);
		log.info(ldapEntryJson);
		RestTemplate restTemplate = new RestTemplate();
		HttpHeaders headers = new HttpHeaders();
		String url = snaplogicEndpoint + "/AddUserInADTask";
		headers.setContentType(MediaType.APPLICATION_JSON);
		restTemplate.getMessageConverters()
        .add(0, new StringHttpMessageConverter(Charset.forName("UTF-8")));
		headers.add("Authorization", "Bearer " + accessToken);
		HttpEntity<String> entity = new HttpEntity<String>(ldapEntryJson, headers);
		ArrayList response = restTemplate.postForObject(url, entity, ArrayList.class);
		log.info(response.toString());
		String resp = handleResponse(response);
		return resp.toString();

	}

	public String sendDataSnaplogic(ConsolidatedUserModel model) {
		log.info("Inside service Send data to portal" + model.toString());
		String ldapEntryJson = createAccountModel(model);
		log.info(ldapEntryJson);
		RestTemplate restTemplate = new RestTemplate();
		HttpHeaders headers = new HttpHeaders();
		String url = snaplogicEndpoint + "/AddUserInPortalTask";
		headers.setContentType(MediaType.APPLICATION_JSON);
		restTemplate.getMessageConverters()
        .add(0, new StringHttpMessageConverter(Charset.forName("UTF-8")));
		headers.add("Authorization", "Bearer " + accessToken);
		HttpEntity<String> entity = new HttpEntity<String>(ldapEntryJson, headers);
		Object response = restTemplate.postForObject(url, entity, Object.class);
		log.info(response.toString());

		return response.toString();

	}

	private String createAzureEntry(CreateUserModel user) {

		String azureEntry = "{\r\n            \"accountEnabled\": true,\r\n            \"signInNames\": [\r\n                        {\r\n                                    \"type\": \"userName\",\r\n                                    \"value\": \""
				+ user.getUserName()
				+ "\"\r\n                        }\r\n            ],\r\n            \"creationType\": \"LocalAccount\",\r\n            \"displayName\": \""
				+ user.getUserName()
				+ "\",\r\n            \"mailNickname\":null,\r\n            \"passwordProfile\": {\r\n                        \"password\": \""
				+ user.getConfirmPassword()
				+ "\",\r\n                        \"forceChangePasswordNextLogin\": false\r\n            },\r\n            \"passwordPolicies\": \"DisablePasswordExpiration\",\r\n            \"city\":null,\r\n            \"country\": null,\r\n            \"facsimileTelephoneNumber\": null,\r\n            \"givenName\": \""
				+ user.getGivenName()
				+ "\",\r\n            \"mail\": null,\r\n            \"mobile\": null,\r\n            \"otherMails\": [\""
				+ user.getEmail()
				+ "\"],\r\n            \"postalCode\": null,\r\n            \"preferredLanguage\": null,\r\n            \"state\": null,\r\n            \"streetAddress\": null,\r\n            \"surname\": \""
				+ user.getSurName() + "\",\r\n            \"telephoneNumber\": null\r\n} \r\n";
		return azureEntry;

	}

	private String createAzureEntry(BulkUserModel user) {
		String azureEntry = "{\r\n            \"accountEnabled\": true,\r\n            \"signInNames\": [\r\n                        {\r\n                                    \"type\": \"userName\",\r\n                                    \"value\": \""
				+ user.getUserName()
				+ "\"\r\n                        }\r\n            ],\r\n            \"creationType\": \"LocalAccount\",\r\n            \"displayName\": \""
				+ user.getUserName()
				+ "\",\r\n            \"mailNickname\":null,\r\n            \"passwordProfile\": {\r\n                        \"password\": \"P@ssword!\",\r\n                        \"forceChangePasswordNextLogin\": false\r\n            },\r\n            \"passwordPolicies\": \"DisablePasswordExpiration\",\r\n            \"city\":null,\r\n            \"country\": null,\r\n            \"facsimileTelephoneNumber\": null,\r\n            \"givenName\": \""
				+ user.getFirstName()
				+ "\",\r\n            \"mail\": null,\r\n            \"mobile\": null,\r\n            \"otherMails\": [\""
				+ user.getEmailAddress()
				+ "\"],\r\n            \"postalCode\": null,\r\n            \"preferredLanguage\": null,\r\n            \"state\": null,\r\n            \"streetAddress\": null,\r\n            \"surname\": \""
				+ user.getLastName() + "\",\r\n            \"telephoneNumber\": null\r\n} \r\n";
		return azureEntry;

	}

	private String createAzureEntry(UpdateUserModel user) {

		String updateEntry = "{ \"Post\": { \"username\": \"" + user.getUserName() + "\", \"firstname\": \""
				+ user.getFirstName() + "\", \"lastname\": \"" + user.getLastName() + "\", \"email\": \""
				+ user.getEmailAddress() + "\", \"shipto\": \"" + user.getShipToNumber() + "\", \"objectid\": \""
				+ user.getObjectId() + "\" } }";
		return updateEntry;

	}

	private String createAccountModel(ConsolidatedUserModel user) {

		String accountEntry = "{              \r\n                \"username\" : \"" + user.getUserId()
				+ "\",\r\n                \"firstname\" : \"" + user.getFirstName()
				+ "\",\r\n                \"lastname\" : \"" + user.getLastName()
				+ "\",\r\n                \"email\" : \"" + user.getEmail()
				+ "\",\r\n                \"email_uuid\" : \"" + user.getUserUUID()
				+ "\",\r\n                \"user_objid\" : \"" + user.getObjectId().toString()
				+ "\",                             \r\n                \"accountid\" : \"" + user.getAccountId()
				+ "\"\r\n}\r\n";
		return accountEntry;

	}

	private String handleResponse(ArrayList response) {
		String objectId = (String) ((HashMap) ((HashMap) ((HashMap) response.get(0)).get("Response")).get("user"))
				.get("objectid");
		if (objectId != null)
			return objectId;
		else
			return "Error in user creation";
	}
	
	private char[] default_Password() 
    { 
        System.out.println("Generating password using random() : "); 
        System.out.print("Your new password is : "); 
  
        // A strong password has Cap_chars, Lower_chars, 
        // numeric value and symbols. So we are using all of 
        // them to generate our password 
        String Capital_chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"; 
        String Small_chars = "abcdefghijklmnopqrstuvwxyz"; 
        String numbers = "0123456789"; 
                String symbols = "!@#$%^&*_=+-/.?<>)"; 
  
  
        String values = Capital_chars + Small_chars + 
                        numbers + symbols; 
  
        // Using random method 
        Random rndm_method = new Random(); 
  
        char[] password = new char[12]; 
  
        for (int i = 0; i < 12; i++) 
        { 
            // Use of charAt() method : to get character value 
            // Use of nextInt() as it is scanning the value as int 
            password[i] = 
              values.charAt(rndm_method.nextInt(values.length())); 
  
        } 
        return password; 
    } 

	/*
	 * public String updateUserModel(CreateUserModel user){
	 * log.info(user.toString());
	 * 
	 * String ldapEntryJson=createUpdateLdapEntry(user); String url="https://"+
	 * akanaEndpoint
	 * +"/digital/b2bandb2c/v2/updateB2BAccount?ldapEntry={ldapEntry}";
	 * ArrayList akanaResp = akanaRestTemplate.postForObject(url, null,
	 * ArrayList.class, ldapEntryJson);
	 * 
	 * String resp=handleAkanaResponse(akanaResp); log.info(resp); return resp;
	 * }
	 */

	/*
	 * public String updateUser(UpdateUserModel user){
	 * log.info(user.toString());
	 * 
	 * //TODO: update the user account String resp="success";
	 * 
	 * log.info(resp); return resp; }
	 * 
	 * 
	 * 
	 * private String createPasswordEntry(AccountModel model) { String
	 * registerEntry="{\"directorybranch\":\"200\", " +
	 * "\"primaryKey\":{\"uid\":\"" + model.getSso() + "\"}," +
	 * "\"updatelist\":" + "{\"userPassword\":\"" + model.getPassword() + "\"" +
	 * "}}"; return registerEntry; }
	 * 
	 * private String createRegisterEntry(AccountModel model) { String
	 * registerEntry="{\"directorybranch\":\"200\", " +
	 * "\"primaryKey\":{\"uid\":\"" + model.getSso() + "\"}," +
	 * "\"updatelist\":" + "{\"userPassword\":\"" + model.getPassword() + "\"" +
	 * "}}"; return registerEntry; }
	 * 
	 * private String createUpdateLdapEntry(CreateUserModel user){ //String
	 * ldapEntry="{\"directorybranch\": \"200\", \"registeredBy\":\"Sponsor\",\"primaryKey\":{\"uid\": \"teststeve3\"}, \"updatelist\": {\"uid\":\"teststeve3\",\"gessolinkedbu\":\"CORPBEN200\",\"sn\":\"User\",\"givenName\":\"Test\",\"cn\":\"Test User\",\"mail\":\"steven.mason@ge.com\",\"gessochallenge\":\"City of Birth\", \"gessoresponse\" :\"city\",\"userPassword\":\"Pass123wOrd\", \"gessotheblob\":\"0\", \"gessostatus\":\"A\", \"gessomarketinguse\":\"1\", \"geSSOPrivacy\":\"0\"}}"
	 * ; String
	 * ldapEntry="{\"uidChangeAllowed\":false,\"directorybranch\": \"200\", " +
	 * "\"primaryKey\":{\"uid\": \"" + user.getUserId() + "\"}, " +
	 * "\"updatelist\": {" + "\"mail\":\"" + user.getEmail() + "\"," +
	 * "\"gessochallenge\":\"" + user.getChallenge() + "\", " +
	 * "\"gessoresponse\" :\"" + user.getChallengeResponse() + "\"," +
	 * "\"userPassword\":\"" + user.getPassword() + "\"" + "}}"; return
	 * ldapEntry; }
	 * 
	 * private String handleAkanaResponse(ArrayList response){ switch ((String)
	 * response.get(0).toString().substring(12).replaceFirst("}","") ) { case
	 * "Sucess": return "User created"; case "SUCCESS": return "User updated";
	 * default: log.error("Error occurred:" + response.get(1).toString());
	 * return response.get(1).toString().substring(15).replaceFirst("}",""); } }
	 * 
	 * private String handleRegisterResponse(ArrayList akanaResponse){ switch
	 * ((String)
	 * akanaResponse.get(0).toString().substring(12).replaceFirst("}","") ) {
	 * case "SUCCESS": return "User registered"; default:
	 * log.error("Error occurred:" + akanaResponse.get(1).toString()); return
	 * akanaResponse.get(1).toString().substring(15).replaceFirst("}",""); } }
	 * 
	 * private String handlePasswordResponse(ArrayList akanaResponse){ switch
	 * ((String)
	 * akanaResponse.get(0).toString().substring(12).replaceFirst("}","") ) {
	 * case "SUCCESS": return "Password updated"; default:
	 * log.error("Error occurred:" + akanaResponse.get(1).toString()); return
	 * akanaResponse.get(1).toString().substring(15).replaceFirst("}",""); } }
	 */

}
